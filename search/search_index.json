{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Skyway Documentation","text":"<p>Skyway is a software package developed at the University of Chicago, Research Computing Center that allows users to burst computing workloads from the on-premise clusters to run on remote commercial cloud platforms such as Amazon AWS, Google GCP and Microsoft Azure. Skyway enables users to run computing tasks in the cloud from Midway in a seamless manner.</p> <p>The official Skyway homepage gives useful information for getting started.</p>"},{"location":"#overview","title":"Overview","text":"<p>From the user persepectives, Skyway functions in a similar way to a HPC cluster where they can transfer data in and out, compile software or load existing modules, submit jobs either to on-premises compute nodes, or to virtual machines (aka instances) from a cloud service provider. The User Guide provides more information.</p> <p>The Developer Guide describes ways to add more functionalities to Skyway.</p> Documentation Description Audience User Guide Installing pre-requisite software and acquiring source code End users Developer Guide Adding cloud services and starting the daemons Admins and developers"},{"location":"#where-to-start","title":"Where to start?","text":"<ul> <li>Researchers interested in using the RCC systems can request an account.  </li> <li>If you would like to chat with an RCC specialist about what services are best for you, please email help@rcc.uchicago.edu</li> </ul>"},{"location":"developer_overview/","title":"Developer Guide","text":"<p>This documentation provides information for admins and developers to install and deploy Skyway on the login node of a HPC system. </p>"},{"location":"developer_overview/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>Python 3.x</li> </ul>"},{"location":"developer_overview/#installation","title":"Installation","text":"<p>Installing Skyway is straightforward</p> <pre><code>  git clone https://github.com/ndtrung81/skyway\n  cd skyway\n  python3 -m venv skyway-env\n  source skyway-env/bin/activate \n  pip install -r requirements.txt\n  export SKYWAYROOT=/path/to/skyway\n  export PATH=$SKYWAYROOT:$PATH\n</code></pre> <p>Line 1: Check out the GitHub repo</p> <p>Lines 3-4: Create a virtual environment and activate it</p> <p>Line 5: Install the required packages into the environment</p> <p>Lines 6-7: Set the environment variable <code>SKYWAYROOT</code> and preppend it to <code>PATH</code></p>"},{"location":"developer_overview/#configuration","title":"Configuration","text":"<p>Under the <code>SKYWAYROOT</code> folder, create a folder structure <pre><code>  etc/\n    - accounts/\n        - rcc-aws.yaml\n    - cloud.yaml\n</code></pre></p> <p>where the content of the file <code>cloud.yaml</code> includes the following: <pre><code>aws:\n    master_access_key_id: 'AKIA--------------'\n    master_secret_access_key: '7bqh-------------'\n\n    username: ec2-user\n    key_name: rcc-skyway\n    ami_id : ami-0b9c9831f6e1cc731\n    io-node: 18.224.41.227\n    grace_sec: 300\n\n    node-types:\n        t1:  { name: t2.micro,    price: 0.0116, cores: 1,  memgb: 1 }\n        c1:  { name: c5.large,    price: 0.085,  cores: 1,  memgb: 3.5 }\n        c8:  { name: c5.4xlarge,  price: 0.68,   cores: 8,  memgb: 32 }\n        g1:  { name: p3.2xlarge,  price: 3.06,   cores: 4,  memgb: 61,  gpu: 1 }\n</code></pre></p> <p>This file lists all the supported cloud vendors such as <code>aws</code> and their node (VM) types.</p> <p>The file <code>rcc-aws.yaml</code> lists all the users allowed to access the cloud account <code>rcc-aws</code>.</p> <pre><code>cloud: aws\ngroup: rcc\naccount:\n     access_key_id: 'AKIA53-------------'\n    secret_access_key: '34oXS-------------'\n    region: us-east-2\n    security_group: ['sg-0a79--------------']\n    protected_nodes: ['rcc-io']\n    account_id: '3910-------------'\n    role_name: rcc-skyway\n    ami_id: 'ami-0fbfb390428631854'\n    key_name: rcc-aws\nnodes:\n    c1:   4\n    c36:  2\n    g1:   2\nusers:\n    user1: { budget: 100 } \n    user2: { budget: 150 }\n</code></pre> <p>The <code>skyway</code> Python package is light weight</p> <pre><code>skyway/\n   - cloud/\n      - aws.py\n      - azure.py\n      - gcp.py\n      - oci.py\n      - slurm.py\n   - __init__.py\n   - account.py\n   - utils.py\ndocs/\nexamples/\n</code></pre>"},{"location":"user_overview/","title":"User Guide","text":"<p>This documentation explains how regular users access to Skyway and submit jobs to use cloud services. Please refer to the Skyway home page for more information and news.</p>"},{"location":"user_overview/#gaining-access","title":"Gaining Access","text":"<p>You first need an active RCC User account (see accounts and allocations page). Next, you should contact your PI or class instructors for access to Skyway. Alternatively, you can reach out to our Help Desk at help@rcc.uchicago.edu for assistance.</p>"},{"location":"user_overview/#connecting","title":"Connecting","text":"<p>You need to log in to the HPC cluster.</p> <pre><code>ssh -Y [cnetid]@midway3.rcc.uchicago.edu\n</code></pre> <p>For Midway3 users, </p> <pre><code>  module use /project/rcc/shared/modulefiles\n  module load skyway\n</code></pre>"},{"location":"user_overview/#running-jobs","title":"Running Jobs","text":"<p>You submit jobs to cloud in a similar manner to what do on your HPC cluster. The difference is that you should specify different partitions and accounts corresponding to the cloud services you have access to. Additionally, the instance configuration should be specified via <code>--constraint</code>.</p> <p>1) List all the node types available to an account <pre><code>skyway_nodetypes --account=your-aws-account\nskyway_nodetypes --account=your-gcp-account\n</code></pre></p> <p>To submit jobs to cloud, you must specify a type of virtual machine (VM) by the option <code>--constraint=[VM Type]</code>. The VM types currently supported through Skyway can be found in the table below. You can also get an up-to-date listing of the machine types by running command sinfo-node-types on a skyway login node.</p> VM Type Configuration Description AWS EC2 Instance t1 1 core, 1GB RAM for testing and building software t2.micro c1 1 core, 4B RAM for serial jobs c5.large c8 8 cores, 32GB RAM for medium sized multicore jobs c5.4xlarge c36 36 cores, 144GB RAM for large memory jobs c5.18xlarge g1 4 cores, 61 GB RAM, 1x V100 GPU for GPU jobs p3.2xlarge g4 16 cores, 244 GB RAM, 4x V100 GPU for heavy GPU jobs p3.8xlarge g5 8 cores, 32 GB RAM, 1x A10G GPU for heavy GPU jobs p5.2xlarge m24 24 cores, 384GB RAM for large memory jobs c5.12xlarge <p>2) Allocate/provision an instance   <pre><code>skyway_alloc --account=rcc-aws --constraint=t1 --time=01:00:00\n</code></pre>   For a GPU instance, use   <pre><code>skyway_alloc -A rcc-aws --constraint=g5 --time=00:30:00\n</code></pre></p> <p>3) List all the running VMs with an account   <pre><code>skyway_list --account=rcc-aws\n</code></pre></p> <p>4) Transfer data to the instance named your-run   <pre><code>skyway_transfer --account=rcc-aws -J your-run training.py\n</code></pre></p> <p>5) Connect to the VM named your-run   <pre><code>skyway_connect --account=rcc-aws your-run\n</code></pre></p> <p>Once on the VM, do   <pre><code>nvidia-smi\nsource activate pytorch\npython training.py &gt; ~/output.txt\nscp output.txt [yourcnetid]@midway3.rcc.uchicago.edu:~/\nexit\n</code></pre> At this point, there would be a file named output.txt in your Midway3 home folder.</p> <p>6) Cancel/terminate/cancel a job   <pre><code>skyway_cancel --account=rcc-aws [job_name]\n</code></pre></p> <p>Expected behavior: The jobs (VMs) got terminated. When run <code>skyway_list</code> (step 3 above) the VM will not be present.</p> <p>The following steps are for launching interactive and batch jobs.</p> <p>7) Submit an interactive job (combinig steps 4, 6 and 7)</p> <p>7a) to AWS   <pre><code>skyway_interative --account=rcc-aws --constraint=t1 --time=01:00:00\n</code></pre>   For a GPU instance, use   <pre><code>skyway_interative --account=rcc-aws --constraint=g5 -t 00:30:00\n</code></pre></p> <p>7b) to midway3   <pre><code>skyway_interactive --account=rcc-midway3 --constraint=t1 --time=01:00:00\n</code></pre> Expected behavior: the user lands on a compute node or a VM on a separate terminal.</p> <p>8) Submit a batch job</p> <p>A sample job script <code>job_script.sh</code> would look like this</p> <pre><code>#!/bin/sh\n\n#SBATCH --job-name=your-run\n#SBATCH --account=rcc-aws\n#SBATCH --constraint=g1\n\nsource activate pytorch\npython training.py\n</code></pre> <p>8a) Submit the job   <pre><code>skyway_batch job_script.sh\n</code></pre>   8b) Connect to the VM to check the current progress of the run (like step 7)   <pre><code>skyway_connect -A rcc-aws -J your-run\n</code></pre></p> <p>Once on the VM:   <pre><code>ls -lrt\ncat output.txt\nexit\n</code></pre></p> <p>8c) Transfer output data from cloud   <pre><code>skyway_transfer --account=rcc-aws -J your-run --from-cloud --cloud-path=~/model*.pkl .\n</code></pre></p> <p>8d) Cancel the job (like step 6)</p>"},{"location":"user_overview/#troubleshooting","title":"Troubleshooting","text":"<p>For further assistance, please contact our Help Desk at help@rcc.uchicago.edu.</p>"}]}